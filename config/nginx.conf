user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug;
pid /run/nginx.pid;

# Load dynamic modules. Uncomment the next line for module loading.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$request_time $upstream_response_time '
                      '$http3 "$http_alt_svc"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # QUIC and HTTP/3 specific settings
    # Enable QUIC retry for connection validation
    quic_retry on;
    
    # Set host key for various tokens (optional)
    # quic_host_key /path/to/host.key;
    
    # Enable GSO (Generic Segmentation Offloading) for better performance
    # Only enable if your network interface supports it
    # quic_gso on;

    server {
        listen       0.0.0.0:80;
        listen       [::]:80;
        server_name  localhost _;

        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        # HTTP/2 and HTTP/1.1 on port 443
        listen       0.0.0.0:443 ssl;
        listen       [::]:443 ssl;
        http2        on;
        
        # HTTP/3 and QUIC on port 443
        listen       0.0.0.0:443 quic reuseport;
        listen       [::]:443 quic reuseport;
        
        server_name  localhost _;
        root         /root/Workspace/nginx_quic/html;
        index        index.html;

        # SSL configuration
        ssl_certificate     /root/Workspace/nginx_quic/ssl/server_san.crt;
        ssl_certificate_key /root/Workspace/nginx_quic/ssl/server.key;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_protocols       TLSv1.3;  # QUIC requires TLS 1.3
        ssl_ciphers         ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!SHA1:!AESCCM;
        ssl_prefer_server_ciphers off;
        
        # SSL debugging and key logging (for packet capture decryption)
        ssl_session_tickets off;  # Disable to force key exchange logging
        
        # Enable early data (0-RTT) for QUIC
        ssl_early_data on;

        # Add Alt-Svc header to advertise HTTP/3
        add_header Alt-Svc 'h3=":443"; ma=86400' always;
        
        # Add security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Add headers to show which protocol is being used
        add_header X-Protocol $server_protocol always;
        add_header X-HTTP3 $http3 always;

        location / {
            try_files $uri $uri/ =404;
            
            # Add CORS headers for testing
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
            
            # Add Alt-Svc header to advertise HTTP/3
            add_header Alt-Svc 'h3=":443"; ma=86400' always;
            
            # Add protocol headers
            add_header X-Protocol $server_protocol always;
            add_header X-HTTP3 $http3 always;
        }

        # Status endpoint for monitoring
        location /status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }

        # API endpoint to show connection info
        location /info {
            default_type application/json;
            return 200 '{"server_protocol":"$server_protocol","http3":"$http3","ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","remote_addr":"$remote_addr","user_agent":"$http_user_agent"}';
        }

        # Handle errors
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}